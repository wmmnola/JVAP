/*
 * vstguiMIDI.java
 *
 * Created on 6. December 2009, 15:00
 *
 * JVAPTools - Tools for rapid Java-VST Audio Plugin creation Copyright (C) 2006 Daniel Reinert
 * This library is free software; you can redistribute it and/or modify it under the terms of the
 * GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this library;
 * if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

package org.jvaptools.scripteffect;

//import com.sun.org.apache.bcel.internal.util.ClassLoader;
import javax.swing.*;
import javax.swing.filechooser.*;
import jvst.wrapper.VSTPluginAdapter;
import jvst.wrapper.gui.VSTPluginGUIRunner;

/**
 *
 * @author  Daniel Reinert
 */
public class vstguiSynth extends jvst.wrapper.VSTPluginGUIAdapter {
    
    org.jvaptools.ParameterEditor.ParameterPanel parampanel;
    
    /** Creates new form vstgui */
    public vstguiSynth(VSTPluginGUIRunner r, VSTPluginAdapter plug) {
        super(r,plug);
        log("Scripteffect Synth <init>");
        initComponents();
        parampanel=new org.jvaptools.ParameterEditor.ParameterPanel(null);
        parampanel.setPreferredSize(new java.awt.Dimension(550, 75));
        this.ParameterScrollPane.setViewportView(parampanel);
        linenumbers=new javax.swing.JTextArea();
        String numbers="";
        for(int i=1;i<=100;i++)
            numbers=numbers+i+"\n";
        lastnumber=50;
        linenumbers.setText(numbers);
        linenumbers.setEditable(false);
        linenumbers.setFocusable(false);
        linenumbers.setBackground(this.Toolbar.getBackground());
        linenumbers.setForeground(new java.awt.Color(0.8f,0.2f,0.2f));
        javax.swing.event.DocumentListener linenumberlistener= new javax.swing.event.DocumentListener() {
            public void changedUpdate(javax.swing.event.DocumentEvent e){}          
            public void insertUpdate(javax.swing.event.DocumentEvent e) { 
                char c=ScriptText.getText().charAt(e.getOffset());
                if(c=='\n')
                {   lastnumber++;
                    if(lastnumber>100) linenumbers.setText(linenumbers.getText()+lastnumber+"\n"); 
                }
            }      
            public void removeUpdate(javax.swing.event.DocumentEvent e) {}          
        };
        this.ScriptText.getDocument().addDocumentListener(linenumberlistener);
        this.ScriptScrollPane.setRowHeaderView(linenumbers);
        settingsdlg=new editsettingsSynth(this);

    this.setTitle("Scripteffect Synth v0.3");
    this.setSize(550, 629);
    this.setResizable(false);

    this.init((org.jvaptools.scripteffect.vstmainSynth)plug);

    //this is needed on the mac only,
    //java guis are handled there in a pretty different way than on win/linux
    //XXX
    if (RUNNING_MAC_X) this.show();
    }
    
    javax.swing.JTextArea linenumbers;
    int lastnumber;
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Toolbar = new javax.swing.JPanel();
        InfoText = new javax.swing.JTextArea();
        ButtonArea = new javax.swing.JPanel();
        RunButton = new javax.swing.JButton();
        LoadButton = new javax.swing.JButton();
        SaveButton = new javax.swing.JButton();
        RunOnLoad = new javax.swing.JCheckBox();
        OptionButton = new javax.swing.JButton();
        ParameterScrollPane = new javax.swing.JScrollPane();
        ScriptScrollPane = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        ScriptText = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Toolbar.setLayout(new java.awt.BorderLayout());

        InfoText.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        InfoText.setEditable(false);
        InfoText.setFont(new java.awt.Font("Arial", 0, 10));
        InfoText.setText("If you made a usefull script, consider contributing it to http://jvaptools.sourceforge.net/scripteffect/scripts.html");
        Toolbar.add(InfoText, java.awt.BorderLayout.SOUTH);

        ButtonArea.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        RunButton.setText("Run");
        RunButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunButtonActionPerformed(evt);
            }
        });
        ButtonArea.add(RunButton);

        LoadButton.setText("Load");
        LoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadButtonActionPerformed(evt);
            }
        });
        ButtonArea.add(LoadButton);

        SaveButton.setText("Save");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });
        ButtonArea.add(SaveButton);

        RunOnLoad.setSelected(true);
        RunOnLoad.setText("Auto run on load");
        ButtonArea.add(RunOnLoad);

        OptionButton.setText("Options");
        OptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OptionButtonActionPerformed(evt);
            }
        });
        ButtonArea.add(OptionButton);

        Toolbar.add(ButtonArea, java.awt.BorderLayout.NORTH);

        ParameterScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        ParameterScrollPane.setPreferredSize(new java.awt.Dimension(550, 75));
        Toolbar.add(ParameterScrollPane, java.awt.BorderLayout.CENTER);

        getContentPane().add(Toolbar, java.awt.BorderLayout.NORTH);

        ScriptScrollPane.setPreferredSize(new java.awt.Dimension(500, 500));

        jPanel2.setLayout(new java.awt.BorderLayout());
        jPanel2.add(ScriptText, java.awt.BorderLayout.CENTER);

        ScriptScrollPane.setViewportView(jPanel2);

        getContentPane().add(ScriptScrollPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    editsettingsSynth settingsdlg;
    
    private void OptionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OptionButtonActionPerformed
// TODO add your handling code here:
        settingsdlg.updateSettings();
        settingsdlg.setVisible(true);
    }//GEN-LAST:event_OptionButtonActionPerformed
            
    /* Shows a dialog to save the file.
     */
    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        boolean cancel=false;
        java.io.File oldfile=file;
        if(file!=null) {
          int retval=javax.swing.JOptionPane.showConfirmDialog(this,"Overwrite "+file.getPath()+" ?");
          if(retval==javax.swing.JOptionPane.CANCEL_OPTION) cancel=true;
          else
          if(retval!=javax.swing.JOptionPane.YES_OPTION) file=null;          
        } 
        if((!cancel)&&(file==null)) {
            JFileChooser chooser = new JFileChooser();
            FileFilter filter = new FileFilter() {
           public boolean accept(java.io.File f){
               return (f.getName().endsWith(".syn"))||f.isDirectory();
           }
           public String getDescription() {
               return "synth script files";
           }
        };
        try{
          chooser.setCurrentDirectory(new java.io.File(this.pPlugin.directory));
        } catch(Exception e)
        {
           e.printStackTrace();
        }
        chooser.setFileFilter(filter);
        chooser.setSelectedFile(new java.io.File("script.syn"));
        int returnVal = chooser.showSaveDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            file=chooser.getSelectedFile();
            if(file.exists()) {
                int retval=javax.swing.JOptionPane.showConfirmDialog(this,"Overwrite "+file.getPath()+" ?");
                if(retval!=javax.swing.JOptionPane.YES_OPTION) { file=oldfile; cancel=true; } 
            }
        } else { file=oldfile; cancel=true; }
        }       
        if((!cancel)&&(file!=null))
        {
            try{
                java.io.BufferedWriter f = new java.io.BufferedWriter(new java.io.FileWriter(file));
                f.write(this.ScriptText.getText());
                f.close();
                javax.swing.JOptionPane.showMessageDialog(this,"File "+file.getPath()+" saved!");                
            } catch(Exception e)
            {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_SaveButtonActionPerformed

    java.io.File file=null;
    
    /* Opens a dialog to select a file to load.
     */
    private void LoadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileFilter filter = new FileFilter() {
           public boolean accept(java.io.File f){
               return (f.getName().endsWith(".txt")||f.getName().endsWith(".syn"))||f.isDirectory();
           }
           public String getDescription() {
               return "synth script files";
           }
        };        
    try{
        java.io.File dir=new java.io.File(this.pPlugin.directory);
        java.io.File dir2=new java.io.File(this.pPlugin.directory+dir.separator+"scripts");        
        if(dir2.exists()&&dir2.isDirectory()) dir=dir2;        
        chooser.setCurrentDirectory(dir);
    } catch(Exception e)
    {
        e.printStackTrace();
    }
    chooser.setFileFilter(filter);
    int returnVal = chooser.showOpenDialog(this);
    if(returnVal == JFileChooser.APPROVE_OPTION) {
        try {
            file=chooser.getSelectedFile();
            java.io.BufferedReader f=new java.io.BufferedReader(new java.io.FileReader(file));
            String script="";
            int lines=0;
            while(f.ready()) {
                script=script+f.readLine()+"\n";
                lines++;
            }
            this.ScriptText.setText(script);
            // Set at least lines linenumbers
            if(lines>100) {
              String numbers="";
              for(int i=1;i<=lines;i++)
                numbers=numbers+i+"\n";
              lastnumber=50;
              linenumbers.setText(numbers);
            }
            //Move to beginning of text
            this.ScriptText.setCaretPosition(0);
            f.close();
            if(this.RunOnLoad.isSelected()) {
                this.RunButtonActionPerformed(null);
            }
        }catch(Exception e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_LoadButtonActionPerformed

    private void RunButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunButtonActionPerformed
// TODO add your handling code here:
        this.compileText();
        if(pPlugin!=null) {
          pPlugin.setParameter("source", this.ScriptText.getText());
        }
    }//GEN-LAST:event_RunButtonActionPerformed
    
    public vstguiSynth gui;
    int maxmsglen=500;
    
    public void compileText() {
        gui=this;
        //Compile asynchron
        java.lang.Runnable run=new java.lang.Runnable() {
          public void run() {
            PluginScriptSynth s=null;
            try{
               org.codehaus.janino.Scanner scanner=new org.codehaus.janino.Scanner(null,
                  new java.io.StringReader(gui.ScriptText.getText()));
                s=(PluginScriptSynth)org.codehaus.janino.ClassBodyEvaluator.createFastClassBodyEvaluator(scanner,PluginScriptSynth.class,
                   gui.getClass().getClassLoader());
            }catch(Exception e) {
                String msg=e.getMessage();                
                if(msg.length()>maxmsglen)
                    msg=msg.substring(0, maxmsglen)+"...";
                javax.swing.JOptionPane.showMessageDialog(gui,msg);
            }
            if(pPlugin!=null) {
              if((s!=null) &&(pPlugin!=null)) pPlugin.setPlugin(s);
            }      
          }  
        };
        new Thread(run).start();
    }
    
    org.jvaptools.scripteffect.vstmainSynth pPlugin=null;
    
    /*  Reads the settings from the vst plugin. 
     *
     */
    public void loadSettingsfromVST() {
        if(this.pPlugin!=null) {
            String fontsizetxt=(String)this.pPlugin.GlobalSettings.getParameter("FontSize");
            if(fontsizetxt==null)
                fontsizetxt=""+this.ScriptText.getFont().getSize();
            this.setFontSize(fontsizetxt);
        }
    }
    
    public void saveSettingsToVST() {
        if(this.pPlugin!=null) {
            this.pPlugin.GlobalSettings.setParameter("FontSize", this.getFontSize());
        }
    }
    
    public void setFontSize(String size) {
        java.awt.Font font=this.ScriptText.getFont();
        float fontsize=this.ScriptText.getFont().getSize();
        try{
           fontsize=Float.parseFloat(size);
        } catch(Exception e) {
        }        
        font=font.deriveFont(fontsize);
        this.ScriptText.setFont(font);
        this.linenumbers.setFont(font);
    }
    
    public String getFontSize()
    {
        return ""+this.ScriptText.getFont().getSize();
    }
    
    public void init(jvst.wrapper.VSTPluginAdapter e) {
       this.pPlugin = (org.jvaptools.scripteffect.vstmainSynth)e;
       if(this.pPlugin!=null) {
           this.pPlugin.gui=this;
           this.loadSettingsfromVST();
           parampanel.setVstPlugin(this.pPlugin);
       }
       this.programChanged();
    }
    
    public void ioChanged() {
        parampanel.setVstPlugin(this.pPlugin);
    }
    
    public void parameterChanged(int index){
        parampanel.vstValueChanged(index);        
    }
    
    public void programChanged() {
        if(pPlugin!=null) {
          file=null;
          String text=""+pPlugin.getParameter("source");
          int lines=0;
          for(int i=0;i<text.length();i++) 
              if(text.charAt(i)=='\n') lines++;     
          // Set at least lines linenumbers
          if(lines>100) {
            String numbers="";
            for(int i=1;i<=lines;i++)
              numbers=numbers+i+"\n";
            lastnumber=50;
            linenumbers.setText(numbers);
          }
          this.ScriptText.setText(""+pPlugin.getParameter("source")); 
          for(int i=0;i<4;i++)
              this.parameterChanged(i);
          this.compileText();
        }
    }
    
    public void saveData() {
       if(pPlugin!=null)
           pPlugin.setParameter("source", this.ScriptText.getText());        
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ButtonArea;
    private javax.swing.JTextArea InfoText;
    private javax.swing.JButton LoadButton;
    private javax.swing.JButton OptionButton;
    private javax.swing.JScrollPane ParameterScrollPane;
    private javax.swing.JButton RunButton;
    private javax.swing.JCheckBox RunOnLoad;
    private javax.swing.JButton SaveButton;
    private javax.swing.JScrollPane ScriptScrollPane;
    public javax.swing.JTextArea ScriptText;
    private javax.swing.JPanel Toolbar;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
    
}
